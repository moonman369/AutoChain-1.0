{
	"id": "9bb471e641913564652d2fbb878bc1be",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.13",
	"solcLongVersion": "0.8.13+commit.abaa5c0e",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ownable.sol": {
				"content": "pragma solidity ^0.8.0;\r\n contract Ownable {\r\n   address payable _owner;\r\n\r\n   constructor () {\r\n     _owner = payable(msg.sender);\r\n   }\r\n\r\n   modifier onlyOwner () {\r\n     require (msg.sender == _owner, \"This function can only be called by the owner.\");\r\n     _;\r\n   }\r\n }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ownable.sol\":26:274  contract Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ownable.sol\":79:137  constructor () {... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/ownable.sol\":119:129  msg.sender */\n  caller\n    /* \"contracts/ownable.sol\":102:108  _owner */\n  0x00\n  dup1\n    /* \"contracts/ownable.sol\":102:130  _owner = payable(msg.sender) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ownable.sol\":26:274  contract Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ownable.sol\":26:274  contract Ownable {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212206cdcba38f05f1b3d7ea4f7312d438eaf2a76d2f137b3fb0203f30bdb168f693664736f6c634300080d0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_15": {
									"entryPoint": null,
									"id": 15,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550603f80605d6000396000f3fe6080604052600080fdfea26469706673582212206cdcba38f05f1b3d7ea4f7312d438eaf2a76d2f137b3fb0203f30bdb168f693664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH1 0x3F DUP1 PUSH1 0x5D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xDCBA38F05F1B3D7EA4F7312D43 DUP15 0xAF 0x2A PUSH23 0xD2F137B3FB0203F30BDB168F693664736F6C634300080D STOP CALLER ",
							"sourceMap": "26:248:0:-:0;;;79:58;;;;;;;;;;119:10;102:6;;:28;;;;;;;;;;;;;;;;;;26:248;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea26469706673582212206cdcba38f05f1b3d7ea4f7312d438eaf2a76d2f137b3fb0203f30bdb168f693664736f6c634300080d0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH13 0xDCBA38F05F1B3D7EA4F7312D43 DUP15 0xAF 0x2A PUSH23 0xD2F137B3FB0203F30BDB168F693664736F6C634300080D STOP CALLER ",
							"sourceMap": "26:248:0:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "24332",
								"totalCost": "36932"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 79,
									"end": 137,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 79,
									"end": 137,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 79,
									"end": 137,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 79,
									"end": 137,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 119,
									"end": 129,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 102,
									"end": 108,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 102,
									"end": 108,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 102,
									"end": 130,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 102,
									"end": 130,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 102,
									"end": 130,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 102,
									"end": 130,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 26,
									"end": 274,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 26,
									"end": 274,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212206cdcba38f05f1b3d7ea4f7312d438eaf2a76d2f137b3fb0203f30bdb168f693664736f6c634300080d0033",
									".code": [
										{
											"begin": 26,
											"end": 274,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 26,
											"end": 274,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 26,
											"end": 274,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 26,
											"end": 274,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 26,
											"end": 274,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 26,
											"end": 274,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							}
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ownable.sol\":{\"keccak256\":\"0x841a80cb36010169426cbdcdabb4a0dd7765075e12582f5245eb97715ea41f7a\",\"urls\":[\"bzz-raw://76ac910fbb344042280866f8ef30f1386e007f951f7800eaa969bb2667ac1c11\",\"dweb:/ipfs/QmRgKNSkUo39GdxgDawMe7AbfHkcUTZvrphSnhVo834z7d\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> contracts/ownable.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "contracts/ownable.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"contracts/ownable.sol": {
				"ast": {
					"absolutePath": "contracts/ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							28
						]
					},
					"id": 29,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "0:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 28,
							"linearizedBaseContracts": [
								28
							],
							"name": "Ownable",
							"nameLocation": "35:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "65:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 28,
									"src": "49:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 2,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "49:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 14,
										"nodeType": "Block",
										"src": "94:43:0",
										"statements": [
											{
												"expression": {
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 6,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "102:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 9,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "119:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 10,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "119:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 8,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "111:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 7,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "111:8:0",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 11,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "111:19:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "102:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 13,
												"nodeType": "ExpressionStatement",
												"src": "102:28:0"
											}
										]
									},
									"id": 15,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "91:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "94:0:0"
									},
									"scope": 28,
									"src": "79:58:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 26,
										"nodeType": "Block",
										"src": "166:104:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 21,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 18,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "183:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 19,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "183:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 20,
																"name": "_owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "197:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "183:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920746865206f776e65722e",
															"id": 22,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "205:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d80655470fdd94621e24f152601ed902b3a1a5bd28a29e2fe4b3a113f1cb848",
																"typeString": "literal_string \"This function can only be called by the owner.\""
															},
															"value": "This function can only be called by the owner."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d80655470fdd94621e24f152601ed902b3a1a5bd28a29e2fe4b3a113f1cb848",
																"typeString": "literal_string \"This function can only be called by the owner.\""
															}
														],
														"id": 17,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "174:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "174:80:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "174:80:0"
											},
											{
												"id": 25,
												"nodeType": "PlaceholderStatement",
												"src": "262:1:0"
											}
										]
									},
									"id": 27,
									"name": "onlyOwner",
									"nameLocation": "153:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "163:2:0"
									},
									"src": "144:126:0",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 29,
							"src": "26:248:0",
							"usedErrors": []
						}
					],
					"src": "0:274:0"
				},
				"id": 0
			}
		}
	}
}