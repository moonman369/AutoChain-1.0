{
	"id": "5e20464ca08cb8c2427c729baad9262d",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\n contract Ownable {\r\n   address payable _owner;\r\n\r\n   constructor () {\r\n     _owner = payable(msg.sender);\r\n   }\r\n\r\n   modifier onlyOwner () {\r\n     require (isOwner(), \"This function can only be called by the owner.\");\r\n     _;\r\n   }\r\n\r\n   function isOwner () public view returns (bool) {\r\n     return (msg.sender == _owner);\r\n   }\r\n }"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"contracts/ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [],
							"name": "isOwner",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts/ownable.sol\":63:398  contract Ownable {\r... */\n  mstore(0x40, 0x80)\n    /* \"contracts/ownable.sol\":116:174  constructor () {\r... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"contracts/ownable.sol\":156:166  msg.sender */\n  caller\n    /* \"contracts/ownable.sol\":139:145  _owner */\n  0x00\n  dup1\n    /* \"contracts/ownable.sol\":139:167  _owner = payable(msg.sender) */\n  0x0100\n  exp\n  dup2\n  sload\n  dup2\n  0xffffffffffffffffffffffffffffffffffffffff\n  mul\n  not\n  and\n  swap1\n  dup4\n  0xffffffffffffffffffffffffffffffffffffffff\n  and\n  mul\n  or\n  swap1\n  sstore\n  pop\n    /* \"contracts/ownable.sol\":63:398  contract Ownable {\r... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts/ownable.sol\":63:398  contract Ownable {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x8f32d59b\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts/ownable.sol\":303:394  function isOwner () public view returns (bool) {\r... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      mload(0x40)\n      tag_6\n      swap2\n      swap1\n      tag_7\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n    tag_5:\n        /* \"contracts/ownable.sol\":344:348  bool */\n      0x00\n        /* \"contracts/ownable.sol\":380:386  _owner */\n      dup1\n      0x00\n      swap1\n      sload\n      swap1\n      0x0100\n      exp\n      swap1\n      div\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ownable.sol\":366:386  msg.sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n        /* \"contracts/ownable.sol\":366:376  msg.sender */\n      caller\n        /* \"contracts/ownable.sol\":366:386  msg.sender == _owner */\n      0xffffffffffffffffffffffffffffffffffffffff\n      and\n      eq\n        /* \"contracts/ownable.sol\":358:387  return (msg.sender == _owner) */\n      swap1\n      pop\n        /* \"contracts/ownable.sol\":303:394  function isOwner () public view returns (bool) {\r... */\n      swap1\n      jump\t// out\n        /* \"#utility.yul\":7:116   */\n    tag_10:\n        /* \"#utility.yul\":88:109   */\n      tag_12\n        /* \"#utility.yul\":103:108   */\n      dup2\n        /* \"#utility.yul\":88:109   */\n      tag_13\n      jump\t// in\n    tag_12:\n        /* \"#utility.yul\":83:86   */\n      dup3\n        /* \"#utility.yul\":76:110   */\n      mstore\n        /* \"#utility.yul\":7:116   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":122:332   */\n    tag_7:\n        /* \"#utility.yul\":209:213   */\n      0x00\n        /* \"#utility.yul\":247:249   */\n      0x20\n        /* \"#utility.yul\":236:245   */\n      dup3\n        /* \"#utility.yul\":232:250   */\n      add\n        /* \"#utility.yul\":224:250   */\n      swap1\n      pop\n        /* \"#utility.yul\":260:325   */\n      tag_15\n        /* \"#utility.yul\":322:323   */\n      0x00\n        /* \"#utility.yul\":311:320   */\n      dup4\n        /* \"#utility.yul\":307:324   */\n      add\n        /* \"#utility.yul\":298:304   */\n      dup5\n        /* \"#utility.yul\":260:325   */\n      tag_10\n      jump\t// in\n    tag_15:\n        /* \"#utility.yul\":122:332   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":338:428   */\n    tag_13:\n        /* \"#utility.yul\":372:379   */\n      0x00\n        /* \"#utility.yul\":415:420   */\n      dup2\n        /* \"#utility.yul\":408:421   */\n      iszero\n        /* \"#utility.yul\":401:422   */\n      iszero\n        /* \"#utility.yul\":390:422   */\n      swap1\n      pop\n        /* \"#utility.yul\":338:428   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa264697066735822122043c846ab41db4953fa9bef2038ec63f8f0a1b00ecfe5d182a714217f26aab64864736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_15": {
									"entryPoint": null,
									"id": 15,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610106806100606000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80638f32d59b14602d575b600080fd5b60336047565b604051603e919060ab565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60a58160c4565b82525050565b600060208201905060be6000830184609e565b92915050565b6000811515905091905056fea264697066735822122043c846ab41db4953fa9bef2038ec63f8f0a1b00ecfe5d182a714217f26aab64864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLER PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x106 DUP1 PUSH2 0x60 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F32D59B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0xAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA5 DUP2 PUSH1 0xC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xBE PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xC8 CHAINID 0xAB COINBASE 0xDB 0x49 MSTORE8 STATICCALL SWAP12 0xEF KECCAK256 CODESIZE 0xEC PUSH4 0xF8F0A1B0 0xE 0xCF 0xE5 0xD1 DUP3 0xA7 EQ 0x21 PUSH32 0x26AAB64864736F6C634300080700330000000000000000000000000000000000 ",
							"sourceMap": "63:335:0:-:0;;;116:58;;;;;;;;;;156:10;139:6;;:28;;;;;;;;;;;;;;;;;;63:335;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@isOwner_37": {
									"entryPoint": 71,
									"id": 37,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 158,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 171,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 196,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:431:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "66:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "83:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "103:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "88:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "88:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "76:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "76:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "76:34:1"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "54:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "61:3:1",
														"type": ""
													}
												],
												"src": "7:109:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "214:118:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "224:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "236:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "247:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "224:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "298:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "311:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "322:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "307:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "307:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "260:37:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "260:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "260:65:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "186:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "198:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "209:4:1",
														"type": ""
													}
												],
												"src": "122:210:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "380:48:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "390:32:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "415:5:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "408:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "408:13:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "401:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "401:21:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "390:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "362:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "372:7:1",
														"type": ""
													}
												],
												"src": "338:90:1"
											}
										]
									},
									"contents": "{\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c80638f32d59b14602d575b600080fd5b60336047565b604051603e919060ab565b60405180910390f35b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614905090565b60a58160c4565b82525050565b600060208201905060be6000830184609e565b92915050565b6000811515905091905056fea264697066735822122043c846ab41db4953fa9bef2038ec63f8f0a1b00ecfe5d182a714217f26aab64864736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8F32D59B EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x47 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x3E SWAP2 SWAP1 PUSH1 0xAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xA5 DUP2 PUSH1 0xC4 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xBE PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x9E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 NUMBER 0xC8 CHAINID 0xAB COINBASE 0xDB 0x49 MSTORE8 STATICCALL SWAP12 0xEF KECCAK256 CODESIZE 0xEC PUSH4 0xF8F0A1B0 0xE 0xCF 0xE5 0xD1 DUP3 0xA7 EQ 0x21 PUSH32 0x26AAB64864736F6C634300080700330000000000000000000000000000000000 ",
							"sourceMap": "63:335:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;303:91;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;344:4;380:6;;;;;;;;;;;366:20;;:10;:20;;;358:29;;303:91;:::o;7:109:1:-;88:21;103:5;88:21;:::i;:::-;83:3;76:34;7:109;;:::o;122:210::-;209:4;247:2;236:9;232:18;224:26;;260:65;322:1;311:9;307:17;298:6;260:65;:::i;:::-;122:210;;;;:::o;338:90::-;372:7;415:5;408:13;401:21;390:32;;338:90;;;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "52400",
								"executionCost": "24371",
								"totalCost": "76771"
							},
							"external": {
								"isOwner()": "2474"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 116,
									"end": 174,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 116,
									"end": 174,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 116,
									"end": 174,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 116,
									"end": 174,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 156,
									"end": 166,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 139,
									"end": 145,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 139,
									"end": 145,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "PUSH",
									"source": 0,
									"value": "100"
								},
								{
									"begin": 139,
									"end": 167,
									"name": "EXP",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 139,
									"end": 167,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "NOT",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "PUSH",
									"source": 0,
									"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
								},
								{
									"begin": 139,
									"end": 167,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "MUL",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 139,
									"end": 167,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 63,
									"end": 398,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 63,
									"end": 398,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122043c846ab41db4953fa9bef2038ec63f8f0a1b00ecfe5d182a714217f26aab64864736f6c63430008070033",
									".code": [
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "8F32D59B"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 63,
											"end": 398,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 63,
											"end": 398,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 344,
											"end": 348,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "EXP",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 380,
											"end": 386,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 380,
											"end": 386,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 366,
											"end": 386,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 366,
											"end": 386,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 366,
											"end": 376,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 366,
											"end": 386,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 366,
											"end": 386,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 366,
											"end": 386,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 358,
											"end": 387,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 358,
											"end": 387,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 303,
											"end": 394,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "tag",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 103,
											"end": 108,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 88,
											"end": 109,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "tag",
											"source": 1,
											"value": "12"
										},
										{
											"begin": 88,
											"end": 109,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 83,
											"end": 86,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 76,
											"end": 110,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 116,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "tag",
											"source": 1,
											"value": "7"
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 209,
											"end": 213,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 247,
											"end": 249,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 236,
											"end": 245,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 232,
											"end": 250,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 224,
											"end": 250,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 224,
											"end": 250,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 322,
											"end": 323,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 311,
											"end": 320,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 307,
											"end": 324,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 298,
											"end": 304,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 260,
											"end": 325,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "tag",
											"source": 1,
											"value": "15"
										},
										{
											"begin": 260,
											"end": 325,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 122,
											"end": 332,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 372,
											"end": 379,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 415,
											"end": 420,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 408,
											"end": 421,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 401,
											"end": 422,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 390,
											"end": 422,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 390,
											"end": 422,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 338,
											"end": 428,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"isOwner()": "8f32d59b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"isOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ownable.sol\":\"Ownable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ownable.sol\":{\"keccak256\":\"0x4dd4b4cd352f2e00f0ec87afa22cd759c755b35f2cb22aec141b61dbb18bc26e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://433d8043bc677eb4c64a20d7dbe258305e33467c2507481a23c12f04e5b2b1a2\",\"dweb:/ipfs/QmWnmRFpGCFt2PYNF1swUyWBHgwzabRVGj43CP8ADxNh5T\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 3,
								"contract": "contracts/ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address_payable"
							}
						],
						"types": {
							"t_address_payable": {
								"encoding": "inplace",
								"label": "address payable",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/ownable.sol": {
				"ast": {
					"absolutePath": "contracts/ownable.sol",
					"exportedSymbols": {
						"Ownable": [
							38
						]
					},
					"id": 39,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "35:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 38,
							"linearizedBaseContracts": [
								38
							],
							"name": "Ownable",
							"nameLocation": "72:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 3,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "102:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 38,
									"src": "86:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address_payable",
										"typeString": "address payable"
									},
									"typeName": {
										"id": 2,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "86:15:0",
										"stateMutability": "payable",
										"typeDescriptions": {
											"typeIdentifier": "t_address_payable",
											"typeString": "address payable"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 14,
										"nodeType": "Block",
										"src": "131:43:0",
										"statements": [
											{
												"expression": {
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 6,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3,
														"src": "139:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"arguments": [
															{
																"expression": {
																	"id": 9,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "156:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 10,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "156:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															],
															"id": 8,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "148:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_payable_$",
																"typeString": "type(address payable)"
															},
															"typeName": {
																"id": 7,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "148:8:0",
																"stateMutability": "payable",
																"typeDescriptions": {}
															}
														},
														"id": 11,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "typeConversion",
														"lValueRequested": false,
														"names": [],
														"nodeType": "FunctionCall",
														"src": "148:19:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address_payable",
															"typeString": "address payable"
														}
													},
													"src": "139:28:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"id": 13,
												"nodeType": "ExpressionStatement",
												"src": "139:28:0"
											}
										]
									},
									"id": 15,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 4,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "128:2:0"
									},
									"returnParameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "131:0:0"
									},
									"scope": 38,
									"src": "116:58:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 24,
										"nodeType": "Block",
										"src": "203:93:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 18,
																"name": "isOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 37,
																"src": "220:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																	"typeString": "function () view returns (bool)"
																}
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "220:9:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656420627920746865206f776e65722e",
															"id": 20,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "231:48:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0d80655470fdd94621e24f152601ed902b3a1a5bd28a29e2fe4b3a113f1cb848",
																"typeString": "literal_string \"This function can only be called by the owner.\""
															},
															"value": "This function can only be called by the owner."
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0d80655470fdd94621e24f152601ed902b3a1a5bd28a29e2fe4b3a113f1cb848",
																"typeString": "literal_string \"This function can only be called by the owner.\""
															}
														],
														"id": 17,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "211:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "211:69:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 22,
												"nodeType": "ExpressionStatement",
												"src": "211:69:0"
											},
											{
												"id": 23,
												"nodeType": "PlaceholderStatement",
												"src": "288:1:0"
											}
										]
									},
									"id": 25,
									"name": "onlyOwner",
									"nameLocation": "190:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 16,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "200:2:0"
									},
									"src": "181:115:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "350:44:0",
										"statements": [
											{
												"expression": {
													"components": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 30,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "366:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 31,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "366:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 32,
																"name": "_owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 3,
																"src": "380:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"src": "366:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"id": 34,
													"isConstant": false,
													"isInlineArray": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "TupleExpression",
													"src": "365:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 29,
												"id": 35,
												"nodeType": "Return",
												"src": "358:29:0"
											}
										]
									},
									"functionSelector": "8f32d59b",
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isOwner",
									"nameLocation": "312:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "320:2:0"
									},
									"returnParameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 37,
												"src": "344:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 27,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "344:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "343:6:0"
									},
									"scope": 38,
									"src": "303:91:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 39,
							"src": "63:335:0",
							"usedErrors": []
						}
					],
					"src": "35:363:0"
				},
				"id": 0
			}
		}
	}
}