{"ast":null,"code":"/*\n    This file is part of web3.js.\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @file ResolverMethodHandler.js\n *\n * @author Samuel Furter <samuel@ethereum.org>\n * @date 2018\n */\n\"use strict\";\n\nvar PromiEvent = require('web3-core-promievent');\n\nvar namehash = require('eth-ens-namehash');\n\nvar errors = require('web3-core-helpers').errors;\n\nvar interfaceIds = require('../config').interfaceIds;\n/**\n * @param {Registry} registry\n * @constructor\n */\n\n\nfunction ResolverMethodHandler(registry) {\n  this.registry = registry;\n}\n/**\n * Executes an resolver method and returns an eventifiedPromise\n *\n * @param {string} ensName\n * @param {string} methodName\n * @param {array} methodArguments\n * @param {function} callback\n * @returns {Object}\n */\n\n\nResolverMethodHandler.prototype.method = function (ensName, methodName, methodArguments, outputFormatter, callback) {\n  return {\n    call: this.call.bind({\n      ensName: ensName,\n      methodName: methodName,\n      methodArguments: methodArguments,\n      callback: callback,\n      parent: this,\n      outputFormatter: outputFormatter\n    }),\n    send: this.send.bind({\n      ensName: ensName,\n      methodName: methodName,\n      methodArguments: methodArguments,\n      callback: callback,\n      parent: this\n    })\n  };\n};\n/**\n * Executes call\n *\n * @returns {eventifiedPromise}\n */\n\n\nResolverMethodHandler.prototype.call = function (callback) {\n  var self = this;\n  var promiEvent = new PromiEvent();\n  var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);\n  var outputFormatter = this.outputFormatter || null;\n  this.parent.registry.getResolver(this.ensName).then(async function (resolver) {\n    await self.parent.checkInterfaceSupport(resolver, self.methodName);\n    self.parent.handleCall(promiEvent, resolver.methods[self.methodName], preparedArguments, outputFormatter, callback);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Executes send\n *\n * @param {Object} sendOptions\n * @param {function} callback\n * @returns {eventifiedPromise}\n */\n\n\nResolverMethodHandler.prototype.send = function (sendOptions, callback) {\n  var self = this;\n  var promiEvent = new PromiEvent();\n  var preparedArguments = this.parent.prepareArguments(this.ensName, this.methodArguments);\n  this.parent.registry.getResolver(this.ensName).then(async function (resolver) {\n    await self.parent.checkInterfaceSupport(resolver, self.methodName);\n    self.parent.handleSend(promiEvent, resolver.methods[self.methodName], preparedArguments, sendOptions, callback);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent.eventEmitter;\n};\n/**\n * Handles a call method\n *\n * @param {eventifiedPromise} promiEvent\n * @param {function} method\n * @param {array} preparedArguments\n * @param {function} callback\n * @returns {eventifiedPromise}\n */\n\n\nResolverMethodHandler.prototype.handleCall = function (promiEvent, method, preparedArguments, outputFormatter, callback) {\n  method.apply(this, preparedArguments).call().then(function (result) {\n    if (outputFormatter) {\n      result = outputFormatter(result);\n    }\n\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency\n      callback(result, result);\n      return;\n    }\n\n    promiEvent.resolve(result);\n  }).catch(function (error) {\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent;\n};\n/**\n * Handles a send method\n *\n * @param {eventifiedPromise} promiEvent\n * @param {function} method\n * @param {array} preparedArguments\n * @param {Object} sendOptions\n * @param {function} callback\n * @returns {eventifiedPromise}\n */\n\n\nResolverMethodHandler.prototype.handleSend = function (promiEvent, method, preparedArguments, sendOptions, callback) {\n  method.apply(this, preparedArguments).send(sendOptions).on('sending', function () {\n    promiEvent.eventEmitter.emit('sending');\n  }).on('sent', function () {\n    promiEvent.eventEmitter.emit('sent');\n  }).on('transactionHash', function (hash) {\n    promiEvent.eventEmitter.emit('transactionHash', hash);\n  }).on('confirmation', function (confirmationNumber, receipt) {\n    promiEvent.eventEmitter.emit('confirmation', confirmationNumber, receipt);\n  }).on('receipt', function (receipt) {\n    promiEvent.eventEmitter.emit('receipt', receipt);\n    promiEvent.resolve(receipt);\n\n    if (typeof callback === 'function') {\n      // It's required to pass the receipt to the second argument to be backwards compatible and to have the required consistency\n      callback(receipt, receipt);\n    }\n  }).on('error', function (error) {\n    promiEvent.eventEmitter.emit('error', error);\n\n    if (typeof callback === 'function') {\n      callback(error, null);\n      return;\n    }\n\n    promiEvent.reject(error);\n  });\n  return promiEvent;\n};\n/**\n * Adds the ENS node to the arguments\n *\n * @param {string} name\n * @param {array} methodArguments\n *\n * @returns {array}\n */\n\n\nResolverMethodHandler.prototype.prepareArguments = function (name, methodArguments) {\n  var node = namehash.hash(name);\n\n  if (methodArguments.length > 0) {\n    methodArguments.unshift(node);\n    return methodArguments;\n  }\n\n  return [node];\n};\n/**\n *\n *\n * @param {Contract} resolver\n * @param {string} methodName\n *\n * @returns {Promise}\n */\n\n\nResolverMethodHandler.prototype.checkInterfaceSupport = async function (resolver, methodName) {\n  // Skip validation for undocumented interface ids (ex: multihash)\n  if (!interfaceIds[methodName]) return;\n  var supported = false;\n\n  try {\n    supported = await resolver.methods.supportsInterface(interfaceIds[methodName]).call();\n  } catch (err) {\n    console.warn('Could not verify interface of resolver contract at \"' + resolver.options.address + '\". ');\n  }\n\n  if (!supported) {\n    throw errors.ResolverMethodMissingError(resolver.options.address, methodName);\n  }\n};\n\nmodule.exports = ResolverMethodHandler;","map":null,"metadata":{},"sourceType":"script"}