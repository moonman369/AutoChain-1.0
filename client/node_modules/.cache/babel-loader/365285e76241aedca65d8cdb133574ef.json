{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web3.js\\\\tb_2\\\\client\\\\src\\\\App.js\";\nimport React, { Component } from \"react\";\nimport ItemManager from \"./contracts/ItemManager.json\";\nimport Item from \"./contracts/Item.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      loaded: false,\n      cost: 0,\n      itemName: \"null\"\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        this.web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        this.accounts = await this.web3.eth.getAccounts(); // Get the contract instance.\n\n        this.networkId = await this.web3.eth.net.getId();\n        this.itemManager = new this.web3.eth.Contract(ItemManager.abi, ItemManager.networks[this.networkId] && ItemManager.networks[this.networkId].address);\n        this.item = new this.web3.eth.Contract(Item.abi, Item.networks[this.networkId] && Item.networks[this.networkId].address); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          loaded: true\n        });\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.handleInputChange = event => {\n      const target = event.target;\n      const value = target.type === \"checkbox\" ? target.checkrd : target.value;\n      const name = target.name;\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = async () => {\n      const _this$state = this.state,\n            cost = _this$state.cost,\n            itemName = _this$state.itemName;\n      await this.itemManager.methods.createItem(itemName, cost).send({\n        from: this.accounts[0]\n      });\n    };\n\n    this.runExample = async () => {\n      const _this$state2 = this.state,\n            accounts = _this$state2.accounts,\n            contract = _this$state2.contract; // Stores a given value, 5 by default.\n\n      await contract.methods.set(69).send({\n        from: accounts[0]\n      }); // Get the value from the contract to prove it worked.\n\n      const response = await contract.methods.get().call(); // Update state with the result.\n\n      this.setState({\n        storageValue: response\n      });\n    };\n  }\n\n  render() {\n    if (!this.state.loaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, \"Loading Web3, accounts, and contract...\");\n    }\n\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"AutoChain 1.0 test\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Items\"), React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Add Items\"), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Cost in wei:\", \" \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"cost\",\n      value: \"this.state.cost\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }), \"Item Identifier:\", \" \", React.createElement(\"input\", {\n      type: \"text\",\n      name: \"itemName\",\n      value: \"this.state.itemName\",\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, \"Create New Item\")));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["E:/Web3.js/tb_2/client/src/App.js"],"names":["React","Component","ItemManager","Item","getWeb3","App","state","loaded","cost","itemName","componentDidMount","web3","accounts","eth","getAccounts","networkId","net","getId","itemManager","Contract","abi","networks","address","item","setState","error","alert","console","handleInputChange","event","target","value","type","checkrd","name","handleSubmit","methods","createItem","send","from","runExample","contract","set","response","get","call","storageValue","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport ItemManager from \"./contracts/ItemManager.json\";\nimport Item from \"./contracts/Item.json\";\nimport getWeb3 from \"./getWeb3\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  state = { loaded: false, cost: 0, itemName: \"null\" };\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      this.web3 = await getWeb3();\n\n      // Use web3 to get the user's accounts.\n      this.accounts = await this.web3.eth.getAccounts();\n\n      // Get the contract instance.\n      this.networkId = await this.web3.eth.net.getId();\n      this.itemManager = new this.web3.eth.Contract(\n        ItemManager.abi,\n        ItemManager.networks[this.networkId] &&\n          ItemManager.networks[this.networkId].address\n      );\n\n      this.item = new this.web3.eth.Contract(\n        Item.abi,\n        Item.networks[this.networkId] && Item.networks[this.networkId].address\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n      this.setState({ loaded: true });\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  handleInputChange = (event) => {\n    const target = event.target;\n    const value = target.type === \"checkbox\" ? target.checkrd : target.value;\n    const name = target.name;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = async () => {\n    const { cost, itemName } = this.state;\n    await this.itemManager.methods\n      .createItem(itemName, cost)\n      .send({ from: this.accounts[0] });\n  };\n\n  runExample = async () => {\n    const { accounts, contract } = this.state;\n\n    // Stores a given value, 5 by default.\n    await contract.methods.set(69).send({ from: accounts[0] });\n\n    // Get the value from the contract to prove it worked.\n    const response = await contract.methods.get().call();\n\n    // Update state with the result.\n    this.setState({ storageValue: response });\n  };\n\n  render() {\n    if (!this.state.loaded) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <h1>AutoChain 1.0 test</h1>\n        <h2>Items</h2>\n        <h2>Add Items</h2>\n        <p>\n          Cost in wei:{\" \"}\n          <input\n            type=\"text\"\n            name=\"cost\"\n            value=\"this.state.cost\"\n            onChange={this.handleInputChange}\n          />\n          Item Identifier:{\" \"}\n          <input\n            type=\"text\"\n            name=\"itemName\"\n            value=\"this.state.itemName\"\n            onChange={this.handleInputChange}\n          />\n          <button type=\"button\" onClick={this.handleSubmit}>\n            Create New Item\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}